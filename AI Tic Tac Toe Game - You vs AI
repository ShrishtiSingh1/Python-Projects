from tkinter import *
import tkinter as tk
from tkinter import messagebox

# Create the Tic-Tac-Toe board (3x3 grid)
board = [' ' for _ in range(9)]

# Function to check if a player has won
def check_win(board, player):
    win_combinations = [(0, 1, 2), (3, 4, 5), (6, 7, 8),  # rows
                        (0, 3, 6), (1, 4, 7), (2, 5, 8),  # columns
                        (0, 4, 8), (2, 4, 6)]             # diagonals
    for combo in win_combinations:
        if board[combo[0]] == board[combo[1]] == board[combo[2]] == player:
            return True
    return False

# Function to check if the board is full (draw)
def check_draw(board):
    return ' ' not in board

# Minimax algorithm to determine the best move for AI
def minimax(board, depth, is_maximizing):
    if check_win(board, 'O'):  # AI is 'O'
        return 1
    elif check_win(board, 'X'):  # Player is 'X'
        return -1
    elif check_draw(board):
        return 0

    if is_maximizing:
        best_score = -float('inf')
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'O'  # AI makes a move
                score = minimax(board, depth + 1, False)
                board[i] = ' '
                best_score = max(score, best_score)
        return best_score
    else:
        best_score = float('inf')
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'X'  # Player makes a move
                score = minimax(board, depth + 1, True)
                board[i] = ' '
                best_score = min(score, best_score)
        return best_score

# Function to make the best move for the AI
def best_move(board):
    best_score = -float('inf')
    move = 0
    for i in range(9):
        if board[i] == ' ':
            board[i] = 'O'
            score = minimax(board, 0, False)
            board[i] = ' '
            if score > best_score:
                best_score = score
                move = i
    return move

# GUI Setup
root = tk.Tk()
root.title("Tic-Tac-Toe: Player vs AI")
root.geometry("600x580")
root.config(bg="black")

# Button list to represent the 3x3 grid
buttons = []

# Reset the game board
def reset_game():
    global board
    board = [' ' for _ in range(9)]
    for button in buttons:
        button.config(text=" ", state=tk.NORMAL, fg="black", bg="white")

# Function to handle player clicking on a button (making a move)
def player_click(index):
    if board[index] == ' ':
        board[index] = 'X'
        buttons[index].config(text="X", state=tk.DISABLED, fg="pink")  # Set 'X' to pink color
        if check_win(board, 'X'):
            messagebox.showinfo("Tic-Tac-Toe", "You win!")
            reset_game()
        elif check_draw(board):
            messagebox.showinfo("Tic-Tac-Toe", "It's a draw!")
            reset_game()
        else:
            ai_turn()

# Function to handle AI's turn
def ai_turn():
    move = best_move(board)
    board[move] = 'O'
    buttons[move].config(text="O", state=tk.DISABLED, fg="light blue")  # Set 'O' to light blue color
    if check_win(board, 'O'):
        messagebox.showinfo("Tic-Tac-Toe", "AI wins!")
        reset_game()
    elif check_draw(board):
        messagebox.showinfo("Tic-Tac-Toe", "It's a draw!")
        reset_game()


# title for page
title_label = tk.Label(root, text="AI Tic Tac Toe :You vs AI", fg="white", bg="black", font=("Arial", 30, "bold"), height=2, width=20)
title_label.place(x=55, y=10)

# Create buttons for the Tic-Tac-Toe grid
for i in range(9):
    button = tk.Button(root, text=" ", font=('Arial', 24), width=5, height=2, bg="white", fg="black",
                       command=lambda i=i: player_click(i))
    button.grid(row=i//3, column=i%3)
    buttons.append(button)
    button.place(x=135 + (i % 3) * 100, y=150 + (i // 3) * 100)

# Add a reset button
reset_button = tk.Button(root, text="Reset", font=('Arial', 14), command=reset_game, fg="white", bg="orange", width=9)
reset_button.grid(row=3, column=1)
reset_button.place(x=234, y=490)

root.mainloop()
